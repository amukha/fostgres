## # Handling Postgres errors


## ## Setting a global error handler
setting webserver views/test-pg-error {
            "view": "fostgres.control.pg-error",
            "configuration": {
                "execute": "test-pg-sql",
                "": "fost.response.503"
            }
        }

PUT test-pg-error /fred {"email": "fred@mail.com"} 200 {"username": "fred", "email": "fred@mail.com"}

# unique_violation
PUT test-pg-error /barney {"email": "fred@mail.com"} 503
# integrity_constraint_violation
PUT test-pg-error /fred/friends/barney {"friend_type": "hangout"} 503

## ## Handling specific error codes
##
## The list of error code names can be found in the
## [Postgres source](https://github.com/postgres/postgres/blob/97c39498e5ca9208d3de5a443a2282923619bf91/src/backend/utils/errcodes.txt)
## and in the
## [Postgres documentation](https://www.postgresql.org/docs/current/errcodes-appendix.html).

## ### Handle the unique violation
setting webserver views/test-pg-error {
            "view": "fostgres.control.pg-error",
            "configuration": {
                "execute": "test-pg-sql",
                "23505": "fost.response.503",
                "": "fost.response.500"
            }
        }

# unique_violation
PUT test-pg-error /barney {"email": "fred@mail.com"} 503
# integrity_constraint_violation
PUT test-pg-error /fred/friends/barney {"friend_type": "hangout"} 500

## ### Handle the integrity violation
setting webserver views/test-pg-error {
            "view": "fostgres.control.pg-error",
            "configuration": {
                "execute": "test-pg-sql",
                "23503": "fost.response.503",
                "": "fost.response.500"
            }
        }

# unique_violation
PUT test-pg-error /barney {"email": "fred@mail.com"} 500
# integrity_constraint_violation
PUT test-pg-error /fred/friends/barney {"friend_type": "hangout"} 503


## ## Non-error cases work
PUT test-pg-error /barney {"email": "barney@mail.com"} 200 {"username": "barney", "email": "barney@mail.com"}
PUT test-pg-error /fred/friends/barney {"friend_type": "hangout"} 200


## ## Retrying serialisation errors

## If we start with a view that throws a serialisation error like this:

setting webserver views/throw-serialisation {
            "view": "test.throw",
            "configuration": {
                "exception": "pqxx::serialization_failure"
            }
        }

## We can wrap it in a error handling view in order to catch the error and
## return a 503 instead of the 500

setting webserver views/serialisation-catch {
            "view": "fostgres.control.pg-error",
            "configuration": {
                "execute": "throw-serialisation",
                "40001": "fost.response.503",
                "": "fost.response.500"
            }
        }
GET serialisation-catch / 503


## We can also retry the serialisation error.

setting webserver views/test-pg-retry {
            "view": "fostgres.control.retry",
            "configuration": {
                "try": "throw-serialisation",
                "error": "fost.response.503"
            }
        }
GET test-pg-retry / 503
